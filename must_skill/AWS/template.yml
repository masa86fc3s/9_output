AWSTemplateFormatVersion: "2010-09-09"
Description: "Create S3, IAM, VPC, Public Subnet, EC2 with SSM, Lambda (dummy) for later update"

Parameters:
  LatestAmiId:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2

Resources:
  # ===== VPC =====
  MyVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub "MyVPC-${AWS::StackName}"

  # ===== Public Subnet =====
  MyPublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub "MyPublicSubnet-${AWS::StackName}"

  # ===== Internet Gateway =====
  MyInternetGateway:
    Type: AWS::EC2::InternetGateway

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref MyVPC
      InternetGatewayId: !Ref MyInternetGateway

  # ===== Route Table for Public Subnet =====
  MyRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC

  MyRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref MyRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref MyInternetGateway

  SubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref MyPublicSubnet
      RouteTableId: !Ref MyRouteTable

  # ===== Security Group =====
  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Allow all outbound for SSM and Internet access"
      VpcId: !Ref MyVPC
      SecurityGroupIngress: [] # インバウンド不要
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0

  # ===== S3 Buckets =====
  InputBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${AWS::AccountId}-cloud-input-${AWS::StackName}"
      VersioningConfiguration:
        Status: Enabled

  OutputBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${AWS::AccountId}-cloud-output-${AWS::StackName}"
      VersioningConfiguration:
        Status: Enabled

  # ===== IAM Role for EC2 =====
  InformaticaEC2Role:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "InformaticaEC2Role-${AWS::StackName}"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
        - arn:aws:iam::aws:policy/AmazonS3FullAccess

  # ===== Instance Profile =====
  InformaticaEC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref InformaticaEC2Role

  # ===== EC2 Instance =====
  InformaticaEC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      IamInstanceProfile: !Ref InformaticaEC2InstanceProfile
      ImageId: !Ref LatestAmiId
      SecurityGroupIds:
        - !Ref EC2SecurityGroup
      SubnetId: !Ref MyPublicSubnet
      Tags:
        - Key: Name
          Value: !Sub "InformaticaEC2-${AWS::StackName}"

  # ===== Lambda IAM Role =====
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "LambdaExecutionRole-${AWS::StackName}"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AmazonS3FullAccess

  # ===== Lambda Function (dummy) =====
  MyLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "my_lambda_${AWS::StackName}"
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.9
      Code:
        ZipFile: |
          def handler(event, context):
              print("Dummy Lambda - replace code later")
              return {"status": "ok"}

Outputs:
  InputBucketName:
    Value: !Ref InputBucket
    Description: "Name of input S3 bucket"

  OutputBucketName:
    Value: !Ref OutputBucket
    Description: "Name of output S3 bucket"

  EC2InstanceId:
    Value: !Ref InformaticaEC2Instance
    Description: "EC2 instance ID"

  LambdaFunctionName:
    Value: !Ref MyLambdaFunction
    Description: "Lambda function name"
